# Production Docker Compose Configuration
# This configuration includes production-ready settings, resource limits, and security hardening

version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: totrackit-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-totrackit}
      POSTGRES_USER: ${POSTGRES_USER:-totrackit}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Performance tuning
      POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS:-256MB}
      POSTGRES_EFFECTIVE_CACHE_SIZE: ${POSTGRES_EFFECTIVE_CACHE_SIZE:-1GB}
      POSTGRES_WORK_MEM: ${POSTGRES_WORK_MEM:-4MB}
      POSTGRES_MAINTENANCE_WORK_MEM: ${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-totrackit} -d ${POSTGRES_DB:-totrackit}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - totrackit-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: false  # PostgreSQL needs write access to /var/lib/postgresql/data
    tmpfs:
      - /tmp
      - /var/run/postgresql
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        labels: "service=postgres,environment=production"

  app:
    image: ${TOTRACKIT_IMAGE:-totrackit:latest}
    container_name: totrackit-app-prod
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      # Database configuration
      DATASOURCES_DEFAULT_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-totrackit}
      DATASOURCES_DEFAULT_USERNAME: ${POSTGRES_USER:-totrackit}
      DATASOURCES_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      DATASOURCES_DEFAULT_MAXIMUM_POOL_SIZE: ${DB_POOL_SIZE:-20}
      DATASOURCES_DEFAULT_MINIMUM_IDLE: ${DB_POOL_MIN_IDLE:-5}
      
      # Application configuration
      MICRONAUT_ENVIRONMENTS: production
      MICRONAUT_SERVER_HOST: 0.0.0.0
      MICRONAUT_SERVER_PORT: 8080
      
      # JVM configuration
      JAVA_OPTS: >-
        -Xms${JVM_MIN_HEAP:-256m}
        -Xmx${JVM_MAX_HEAP:-512m}
        -XX:+UseG1GC
        -XX:MaxGCPauseMillis=200
        -XX:+UseStringDeduplication
        -XX:+OptimizeStringConcat
        -Djava.security.egd=file:/dev/./urandom
        -Dfile.encoding=UTF-8
        -Duser.timezone=${TZ:-UTC}
      
      # Security and monitoring
      TOTRACKIT_METRICS_ENABLED: ${METRICS_ENABLED:-true}
      TOTRACKIT_HEALTH_CHECKS_ENABLED: ${HEALTH_CHECKS_ENABLED:-true}
      TOTRACKIT_LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
    networks:
      - totrackit-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
        reservations:
          memory: 384M
          cpus: '0.5'
      replicas: ${APP_REPLICAS:-1}
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        labels: "service=app,environment=production"

  # Reverse proxy for production (optional)
  nginx:
    image: nginx:1.25-alpine
    container_name: totrackit-nginx-prod
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - totrackit-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
    profiles:
      - nginx
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"
        labels: "service=nginx,environment=production"

volumes:
  postgres_prod_data:
    driver: local
  app_logs:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local

networks:
  totrackit-prod-network:
    driver: bridge
    name: totrackit-prod
    ipam:
      config:
        - subnet: 172.20.0.0/16