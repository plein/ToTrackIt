openapi: 3.1.0
info:
  title: Swagger ToTrackIt - OpenAPI 3.1
  description: |-
    TODO
  contact:
    email: support@totrackit.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about ToTrackIt
  url: https://github.com/plein/ToTrackIt
servers:
  - url: http://localhost:8080/v1/
    description: Development Server
tags:
  - name: admin
    description: Admin operations.
  - name: users
    description: Operations about users
  - name: namespaces
    description: Manage namespaces.
  - name: processes
    description: Everything about processes.
paths:
  /admin/api-keys:
    get:
      tags:
        - admin
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: List all administrative API keys
      description: >
        Retrieve a list of all administrative API keys with their metadata. 
        The full key value is never returned for security reasons.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '200':
          description: A list of administrative API keys.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The unique identifier of the API key.
                      examples: ["key12345"]
                    name:
                      type: string
                      description: The human-readable name of the key.
                      examples: ["Ops Team Key"]
        
    post:
      tags:
        - admin
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: Generate a new administrative API key
      description: >
        Generates a new administrative API key with elevated permissions. 
        The full API key is only shown once and should be stored securely by the requester. First administrative API key must be generated by an Admin using the UI.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A human-readable name for the API key (e.g., "Ops Team Key").
                  examples: ["Ops Team Key"]
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '201':
          description: Administrative API key generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_key:
                    type: string
                    description: >
                      The full API key. This value is only displayed once. Store it securely.
                    examples: ["admin_abc123xyz456def"]
                  id:
                    type: string
                    description: The unique identifier of the API key.
                    examples: ["key12345"]
                  name:
                    type: string
                    examples: ["Ops Team Key"]
  /admin/api-keys/{key_id}:
    delete:
      tags:
        - admin
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: Revoke an administrative API key.
      description: Deletes or revokes an administrative API key.
      parameters:
        - name: key_id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the API key.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '204':
          description: API key revoked successfully.
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /users:
    get:
      tags:
        - users
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: List all users
      description: >
        Retrieve a list of all users, including their associated namespaces and roles.
        Requires an administrative API key.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: string
                      description: The Cognito user ID of the user.
                      examples: ["cognito-user-id-123"]
                    email:
                      type: string
                      description: The email address of the user.
                      examples: ["user@example.com"]
                    name:
                      type: string
                      description: The name of the user.
                      examples: ["Alice Smith"]
  /users/{id}:
    patch:
      tags:
        - users
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: Update a user's role
      description: Update specific fields of a user, such as their role. Requires an administrative API key.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  description: The new role of the user.
                  enum: [admin, viewer, null] # null removes the role
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '204':
          description: User updated successfully.
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /namespaces:
    get:
      tags:
        - namespaces
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: List all namespaces
      description: >
        Retrieve a list of all namespaces. Requires an administrative API key for authorization.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '200':
          description: A list of namespaces.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      examples: ["12345"]
                    name:
                      type: string
                      examples: ["teamA"]
                    description:
                      type: string
                      examples: ["Namespace for Team A"]
    post:
      tags:
        - namespaces
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: Create a new namespace
      description: >
        Create a new namespace. Requires an administrative API key for authorization.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: The unique name of the namespace.
                  examples: ["teamA"]
                description:
                  type: string
                  description: An optional description of the namespace.
                  examples: ["Namespace for Team A"]
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '201':
          description: Namespace created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The unique identifier of the namespace.
                    examples: ["12345"]
                  name:
                    type: string
                    examples: ["teamA"]
                  description:
                    type: string
                    examples: ["Namespace for Team A"]
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /namespaces/{id}:
    delete:
      tags:
        - namespaces
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: Delete a namespace
      description: >
        Delete an existing namespace. Requires an administrative API key for authorization.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the namespace.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '204':
          description: Namespace deleted successfully.
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /namespaces/{id}/api-keys:
    get:
      tags:
      - namespaces
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: List API keys for a namespace
      description: >
        Retrieve a list of API keys for the specified namespace. 
        Requires an administrative API key for authorization.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the namespace.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '200':
          description: A list of API keys.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The unique identifier of the API key.
                      examples: ["key12345"]
                    name:
                      type: string
                      description: A human-readable name for the API key (e.g., "Ops Team Key").
                      examples: ["Ops Team Key"]
                    permissions:
                      type: string
                      enum: [read, write]
                      description: The permissions to assign to the API key.
                      examples: ["read", "write"]
                    created_at:
                      type: string
                      format: date-time
                      description: The timestamp when the API key was created.
                      examples: ["2025-01-01T10:00:00Z"]
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - namespaces
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: Generate an API key for a namespace
      description: >
        Generate a new API key scoped to a specific namespace. Requires an administrative API key for authorization. This value is only displayed once. Store it securely.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the namespace.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A human-readable name for the API key (e.g., "Ops Team Key"). Must be unique in the namespace.
                  examples: ["Ops Team Key"]
                permissions:
                  type: string
                  enum: [read, write]
                  description: The permissions to assign to the API key.
                  examples: ["read", "write"]
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '201':
          description: API key generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_key:
                    type: string
                    description: The generated API key. This value is only displayed once. Store it securely.
                    examples: ["ns_abc123xyz"]
                  id:
                    type: string
                    description: The unique identifier of the API key.
                    examples: ["key12345"]
                  permissions:
                    type: array
                    items:
                      type: string
                    examples: ["read", "write"]
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
  /namespaces/{id}/api-keys/{key_id}:
    delete:
      tags:
      - namespaces
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: Delete an API key
      description: >
        Delete a specific API key scoped to the given namespace. 
        Requires an administrative API key for authorization.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the namespace.
        - name: key_id
          in: path
          required: true
          schema:
            type: string
            description: The API key id to delete.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '204':
          description: API key deleted successfully.
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /namespaces/{namespace_id}/users:
    get:
      tags:
      - namespaces
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: List users in a namespace
      description: >
        Retrieve all users associated with a namespace and their roles.
        Requires an administrative API key or namespace scoped API key.
      parameters:
        - name: namespace_id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the namespace.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '200':
          description: A list of users and their roles in the namespace.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: string
                      description: The Cognito user ID of the user.
                      examples: ["cognito-user-id-123"]
                    email:
                      type: string
                      description: The email address of the user.
                      examples: ["user@example.com"]
                    name:
                      type: string
                      description: The name of the user.
                      examples: ["John Doe"]
                    role:
                      type: string
                      enum: [read, write]
                      description: The user's role in the namespace.
                      examples: ["write"]
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
      - namespaces
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: Add a user to a namespace
      description: Add a user to a namespace and assign an initial role.
      parameters:
        - name: namespace_id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the namespace.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: The unique identifier of the user.
                  examples: ["456"]
                role:
                  type: string
                  enum: [read, write]
                  description: The initial role to assign to the user.
                  examples: ["read"]
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '200':
          description: User is already part of the namesapace.
        '201':
          description: User added to the namespace successfully.
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /namespaces/{namespace_id}/users/{user_id}/permissions:
    patch:
      tags:
      - namespaces
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: Update a user's permissions in a namespace
      description: >
        Update the permissions for a user in a namespace. The user must already
        be associated with the namespace.
      parameters:
        - name: namespace_id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the namespace.
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [read, write, null]
                  description: >
                    The role to assign to the user. Use `null` to remove permissions
                    from the user without deleting their association with the namespace.
                  examples: ["write"]
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '204':
          description: Permissions updated successfully.
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /namespaces/{namespace_id}/users/{user_id}:
    delete:
      tags:
      - namespaces
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      summary: Remove a user from a namespace
      description: Remove a user and all their permissions from a namespace.
      parameters:
        - name: namespace_id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the namespace.
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the user.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '204':
          description: User removed from the namespace successfully.
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /processes:
    get:
      tags:
        - processes
      summary: List all processes in the namespace.
      description: Retrieve a paginated list of all registered processes.
      security:
        - ApiKeyAuth: []
        - cognito_oauth: []
      parameters:
        - name: namespace_id
          in: query
          required: false
          schema:
            type: string
            description: The unique identifier of the namespace. Required when using administrative API Key with access to multiple namespaces.
        - name: name
          in: query
          description: Filter by process name.
          required: false
          schema:
            type: string
            examples: ["riskCalculation"]
        - name: id
          in: query
          description: Filter by process id.
          required: false
          schema:
            type: string
            examples: ["id99"]
        - name: status
          in: query
          description: Filter by process status.
          required: false
          schema:
            type: string
            enum: [active, completed, failed]
            examples: ["active"]
        - name: deadlineStatus
          in: query
          description: Filter by deadline status.
          required: false
          schema:
            type: string
            enum: [on_track, missed, completed_on_time, completed_late]
            examples: ["on_track"]
        - name: deadline_before
          in: query
          description: Filter processes with deadlines before the specified Unix timestamp.
          required: false
          schema:
            type: integer
            examples: ["1672531200"]
        - name: deadline_after
          in: query
          description: Filter processes with deadlines after the specified Unix timestamp.
          required: false
          schema:
            type: integer
            examples: ["1672531200"]
        - name: running_duration_min
          in: query
          description: >
            Filter processes that have been running or ran for at least the specified duration, in seconds. 
            For active processes, duration is calculated as `now - start_date`. 
            For completed processes, duration is calculated as `completed_at - start_date`.
          required: false
          schema:
            type: integer
            examples: ["600"]
        - name: sort_by
          in: query
          description: >
            Comma-separated list of fields to sort by. 
            Use `:asc` or `:desc` to specify sort direction. Defaults to ascending if not provided.
          required: false
          schema:
            type: string
            examples: ["deadline:asc,name:desc"]
        - name: page
          in: query
          description: Page number for pagination (starts at 1).
          required: false
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of results per page.
          required: false
          schema:
            type: integer
            default: 10
            maximum: 50
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '200':
          description: List of processes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailedProcess'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  
  /processes/metrics:
    get:
      tags:
      - processes
      summary: Fetch metrics for a namespace
      description: Retrieve either time-series metrics or a single aggregated value for processes within a specific namespace. If `period` is not provided, the response will return a single aggregated value for the specified time range.
      security:
      - ApiKeyAuth: []
      - cognito_oauth: []
      parameters:
      - name: namespace_id
        in: query
        required: false
        schema:
          type: string
          description: The unique identifier of the namespace. Required when using administrative API Key with access to multiple namespaces.
      - name: name
        in: query
        description: Filter metrics by the name of the process.
        required: false
        schema:
          type: string
      - name: status
        in: query
        description: Filter metrics by process status (active, completed, failed).
        required: false
        schema:
          type: string
          enum:
          - active
          - completed
          - failed
      - name: deadline_status
        in: query
        description: Filter metrics by deadline status (e.g., missed, on track).
        required: false
        schema:
          type: string
          enum:
          - on_track
          - missed
          - completed_on_time
          - completed_late
      - name: start_time
        in: query
        description: Start of the time range (Unix timestamp in seconds).
        required: true
        schema:
          type: integer
          format: int64
      - name: end_time
        in: query
        description: End of the time range (Unix timestamp in seconds). Defaults to the current time if not provided.
        required: false
        schema:
          type: integer
          format: int64
      - name: period
        in: query
        description: Time interval for metrics (e.g., 1h, 1d, 1w). If not provided, the API will return a single aggregated result.
        required: false
        schema:
          type: string
          pattern: "^[0-9]+[smhdw]$"
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        "200":
          description: Time-series or single aggregated metrics for the namespace.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    start:
                      type: integer
                      format: int64
                      description: Start of the interval (Unix timestamp in seconds).
                      examples: ["1672531200"]
                    end:
                      type: integer
                      format: int64
                      description: End of the interval (Unix timestamp in seconds).
                      examples: ["167251200"]
                    total_processes:
                      type: integer
                      description: Total number of processes in this interval.
                    avg_duration:
                      type: number
                      format: float
                      description: Average duration (in seconds) for completed processes in this interval.
                    missed_deadline_percentage:
                      type: number
                      format: float
                      description: Percentage of processes that missed deadlines in this interval.
                    status_distribution:
                      type: object
                      description: Distribution of processes by status in this interval.
                      properties:
                        active:
                          type: integer
                        completed:
                          type: integer
                        failed:
                          type: integer
                    deadline_status_distribution:
                      type: object
                      description: Distribution of processes by their deadline status in this interval.
                      properties:
                        on_track:
                          type: integer
                          description: Number of processes that met their deadlines without issue.
                        missed:
                          type: integer
                          description: Number of processes that missed their deadlines.
                        completed_on_time:
                          type: integer
                          description: Number of processes completed before the deadline.
                        completed_late:
                          type: integer
                          description: Number of processes completed after missing the deadline.
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /processes/{name}:
    post:
      tags:
        - processes
      summary: Register a new process
      description: >
        Create a new process with a unique combination of `name` and `id`. 
        Only one active process with the same `name` and `id` is allowed at a time. 
        If a process with the same `name` and `id` already exists and is not marked as completed, the request will be rejected.
      parameters:
        - name: name
          in: path
          description: Name of the process.
          required: true
          schema:
            type: string
        - name: namespace_id
          in: query
          required: false
          schema:
            type: string
            description: The unique identifier of the namespace. Required when using administrative API Key with access to multiple namespaces.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProcess'
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '201':
          description: Process created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedProcess'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
  /processes/{name}/{id}:
    get:
      tags:
        - processes
      summary: Get process details
      description: Retrieve details of a specific process by its name and id.
      parameters:
        - name: name
          in: path
          description: Name of the process.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the process.
          required: true
          schema:
            type: string
        - name: namespace_id
          in: query
          required: false
          schema:
            type: string
            description: The unique identifier of the namespace. Required when using administrative API Key with access to multiple namespaces.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '200':
          description: Process details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedProcess'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /processes/{name}/{id}/complete:
    post:
      tags:
        - processes
      summary: Mark a process as completed
      description: Mark a specific process as completed by its name and id.
      parameters:
        - name: name
          in: path
          description: Name of the process.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique identifier of the process.
          required: true
          schema:
            type: string
        - name: namespace_id
          in: query
          required: false
          schema:
            type: string
            description: The unique identifier of the namespace. Required when using administrative API Key with access to multiple namespaces.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: 
                    - COMPLETED
                    - FAILED
                  description: The outcome of the process.
                  default: COMPLETED
                  examples: ["COMPLETED"]
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        '200':
          description: Process marked as completed successfully.
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        
  /channels:
    post:
      tags:
        - channels
      summary: Create a reusable channel
      description: Create a reusable channel for notifications (email or webhook).
      parameters:
        - name: namespace_id
          in: query
          required: false
          schema:
            type: string
            description: The unique identifier of the namespace. Required when using administrative API Key with access to multiple namespaces.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        "201":
          description: Channel created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

    get:
      tags:
        - channels
      summary: List all channels
      description: Retrieve all channels for a namespace.
      parameters:
        - name: namespace_id
          in: query
          required: false
          schema:
            type: string
            description: The unique identifier of the namespace. Required when using administrative API Key with access to multiple namespaces.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        "200":
          description: List of channels.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /channels/{channel_id}:
    put:
      tags:
        - channels
      summary: Update a channel
      description: Modify an existing channel's configuration.
      parameters:
        - name: namespace_id
          in: query
          required: false
          schema:
            type: string
            description: The unique identifier of the namespace. Required when using administrative API Key with access to multiple namespaces.
        - name: channel_id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the channel.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChannelRequest'
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        "200":
          description: Channel updated successfully.
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

    delete:
      tags:
        - channels
      summary: Delete a channel
      description: Remove a channel from a namespace.
      parameters:
        - name: namespace_id
          in: query
          required: false
          schema:
            type: string
            description: The unique identifier of the namespace. Required when using administrative API Key with access to multiple namespaces.
        - name: channel_id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the channel.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        "204":
          description: Channel deleted successfully.
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Channel is associated to one or more notifications and can't be deleted.
          $ref: '#/components/responses/ConflictError'
  
  /notifications:
    post:
      tags:
        - notifications
      summary: Create a notification configuration
      description: Define a notification configuration using reusable channels.
      parameters:
        - name: namespace_id
          in: query
          required: false
          schema:
            type: string
            description: The unique identifier of the namespace. Required when using administrative API Key with access to multiple namespaces.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotificationRequest'
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        "201":
          description: Notification configuration created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

    get:
      tags:
        - notifications
      summary: List notification configurations
      description: Retrieve all notification configurations for a namespace.
      parameters:
        - name: namespace_id
          in: query
          required: false
          schema:
            type: string
            description: The unique identifier of the namespace. Required when using administrative API Key with access to multiple namespaces.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        "200":
          description: List of notification configurations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
       

  /notifications/{notification_id}:
    put:
      tags:
        - notifications
      summary: Update a notification configuration
      description: Modify an existing notification configuration, such as changing thresholds, name, or removing channels.
      parameters:
        - name: notification_id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the notification configuration.
        - name: namespace_id
          in: query
          required: false
          schema:
            type: string
            description: The unique identifier of the namespace. Required when using administrative API Key with access to multiple namespaces.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNotificationRequest'
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        "200":
          description: Notification configuration updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

    delete:
      tags:
        - notifications
      summary: Delete a notification configuration
      description: Remove a notification configuration.
      parameters:
        - name: notification_id
          in: path
          required: true
          schema:
            type: string
            description: The unique identifier of the notification configuration.
        - name: namespace_id
          in: query
          required: false
          schema:
            type: string
            description: The unique identifier of the namespace. Required when using administrative API Key with access to multiple namespaces.
      responses:
        default:
          $ref: '#/components/responses/DefaultError'
        "204":
          description: Notification configuration deleted successfully.
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  responses:
    DefaultError:
      description: A generic error response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Error response for internal service errors.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidInputError:
      description: Error response for invalid input requests.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: Error response for internal service errors.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    AuthorizationError:
      description: Error response for Authorization problems.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ConflictError:
      description: Error response for conflit problems.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Process:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the process execution. There can be `only one active process` with the combination of `name` and `id`.
          pattern: "^[a-zA-Z0-9_-]+$"
          minLength: 3
          maxLength: 50
          examples: ["id99", "customerX"]
        deadline:
          type: integer
          description: Deadline as a Unix timestamp (seconds since epoch).
          examples: ["1672531200"]
        tags:
          type: array
          description: Key-value pairs for tagging the process. Keys and values must conform to allowed characters.
          items:
            type: object
            required:
              - key
              - value
            properties:
              key:
                type: string
                description: Tag key. Only Unicode letters, digits, white space, and allowed symbols are permitted.
                minLength: 1
                maxLength: 128
                pattern: "^[\\w\\s.:/=+\\-@]+$"
                examples: ["environment", "priority"]
              value:
                type: string
                description: Tag value. Only Unicode letters, digits, white space, and allowed symbols are permitted.
                pattern: "^[\\w\\s.:/=+\\-@]+$"
                minLength: 1
                maxLength: 256
                examples: ["production", "high"]
        context:
          type: object
          additionalProperties: true
          description: Arbitrary context data associated with the process.
          examples:
            [customerId: "C1234"]
    DetailedProcess:
      type: object
      allOf: 
        - $ref: '#/components/schemas/Process'
        - type: object
          properties:
            name:
              type: string
              description: Name of the process.
              pattern: "^[a-zA-Z0-9_-]+$"
              minLength: 3
              maxLength: 100
              examples: ["DataProcessingTask"]
            status:
              type: string
              enum: 
                - active
                - completed
                - failed
              description: The outcome of the process.
              default: successful
              examples: ["successful"]
            deadlineStatus:
              type: string
              description: pet status in the store
              enum:
                - on_track
                - missed
                - completed_late
                - completed_on_time
              examples: ["completed_late"]
            started_at:
              type: integer
              format: date-time
              description: The timestamp when the process started as a Unix timestamp (seconds since epoch).
              examples: ["1672531200"]
            completed_at:
              type: integer
              format: date-time
              description: The timestamp when the process was completed, if applicable, as a Unix timestamp (seconds since epoch).
              examples: ["167251200"]
    NewProcess:
      type: object
      allOf: 
        - $ref: '#/components/schemas/Process'
        - type: object
          required: 
          - name
          - id
          - deadline
    CreatedProcess:
        type: object
        properties:
          id:
            type: string
            description: Identifier of the process execution. If it was provided will be the same returned. Otherwise, a new autogenerated id.
            pattern: "^[a-zA-Z0-9_-]+$"
            examples: ["id99", "customerX"]
    CreateChannelRequest:
      type: object
      required:
        - name
        - type
        - config
      properties:
        name:
          type: string
          description: A unique name for the channel within the namespace.
          examples: ["Ops Webhook"]
        type:
          type: string
          enum: ["email", "webhook"]
          description: The type of channel (email or webhook).
          examples: ["webhook"]
        config:
          type: object
          description: Configuration for the channel, varying based on the type.
          oneOf:
            - type: object
              description: Webhook configuration.
              properties:
                url:
                  type: string
                  format: uri
                  description: The URL of the webhook.
                  examples: ["https://example.com/webhook"]
                custom_headers:
                  type: object
                  additionalProperties:
                    type: string
                  description: Optional custom headers for the webhook.
                  examples:
                    - Authorization: "Bearer token123"
                    - X-Custom-Header: "CustomValue"
                encode_as:
                  type: string
                  enum: ["json", "form"]
                  description: Encoding type for the payload. Can be `json` or `form`.
                  examples: ["json"]
                  default: "json"
            - type: object
              description: Email configuration.
              properties:
                email:
                  type: string
                  format: email
                  description: The email address to send notifications to.
                  examples: ["user@example.com"]

    UpdateChannelRequest:
      type: object
      properties:
        name:
          type: string
          description: Updated unique name for the channel (must remain unique in the namespace).
        config:
          type: object
          description: Updated configuration for the channel.
          oneOf:
            - type: object
              description: Webhook configuration.
              properties:
                url:
                  type: string
                  format: uri
                  description: The URL of the webhook.
                  examples: ["https://example.com/webhook"]
                custom_headers:
                  type: object
                  additionalProperties:
                    type: string
                  description: Optional custom headers for the webhook.
                  examples:
                    - Authorization: "Bearer token123"
                    - X-Custom-Header: "CustomValue"
                encode_as:
                  type: string
                  enum: ["json", "form"]
                  description: Encoding type for the payload. Can be `json` or `form`.
                  examples: ["json"]
            - type: object
              description: Email configuration.
              properties:
                email:
                  type: string
                  format: email
                  description: The email address to send notifications to.
                  examples: ["user@example.com"]
    Channel:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the channel.
        namespace_id:
          type: string
        name:
          type: string
          description: Name that will help you to identify the channel. Must be unique inside the namespace.
          examples: ["SRE email"]
        type:
          type: string
        config:
          type: object

    CreateNotificationRequest:
      type: object
      required:
        - name
        - event_type
        - channel_ids
        - threshold
      properties:
        name:
          type: string
          description: A unique name for the notification configuration within the namespace.
          examples: ["Critical Deadline Alerts"]
        event_type:
          type: string
          enum: ["deadline_approaching", "deadline_breached", "process_completed"]
          description: The event that triggers the notification.
          examples: ["deadline_approaching"]
        threshold:
          type: object
          description: The condition for triggering the notification.
          required:
            - type
            - value
          properties:
            type:
              type: string
              enum: ["percent", "duration"]
              description: Whether the threshold is defined as a percentage or a fixed duration.
              examples: ["duration"]
            value:
              type: number
              description: The threshold value (percentage or duration in seconds).
              examples: ["300"]
        targets:
          type: object
          description: Criteria to target specific processes. If any of the target match, the notification will be sent. If there are no target, notification will be sent for all processes.
          properties:
            names:
              type: array
              items:
                type: string
              description: List of process names to target. If omitted, applies to all process names.
              examples: ["DataProcessingTask", "CriticalReport"]
            tags:
              type: object
              additionalProperties:
                type: string
              description: Tags to match for processes. All specified tags must match (AND logic). If omitted, applies to all tags.
              example:
                priority: "high"
                department: "finance"
        channel_ids:
          type: array
          items:
            type: string
          description: IDs of the channels to use for this notification.
        description:
          type: string
          description: Description that will be included in the notification.
          examples: 
            - "Problems with payment systems"

    UpdateNotificationRequest:
      type: object
      properties:
        name:
          type: string
          description: Updated unique name for the notification configuration.
        event_type:
          type: string
          enum: ["deadline_approaching", "deadline_breached", "process_completed"]
        threshold:
          type: object
          properties:
            type:
              type: string
              enum: ["percent", "duration"]
            value:
              type: number
        targets:
          type: object
          description: Updated criteria to target specific processes.
          properties:
            names:
              type: array
              items:
                type: string
              description: List of process names to target. If omitted, applies to all process names.
            tags:
              type: object
              additionalProperties:
                type: string
              description: Tags to match for processes. All specified tags must match (AND logic). If omitted, applies to all tags.
        channel_ids:
          type: array
          items:
            type: string
          description: Updated IDs of the channels to use for this notification.
        description:
          type: string
          description: Description that will be included in the notification.
          examples: 
            - "Problems with payment systems"

    Notification:
      type: object
      properties:
        id:
          type: string
          description: Notification configuration ID.
        name:
          type: string
          description: Unique name of the notification configuration.
        event_type:
          type: string
          description: The event that triggers the notification.
        threshold:
          type: object
          description: The condition for triggering the notification.
          properties:
            type:
              type: string
            value:
              type: number
        targets:
          type: object
          description: Criteria to target specific processes.
          properties:
            names:
              type: array
              items:
                type: string
            tags:
              type: object
              additionalProperties:
                type: string
        channel_ids:
          type: array
          items:
            type: string
        description:
          type: string
          description: Description that will be included in the notification.
          examples: 
            - "Problems with payment systems"

    Error:
      type: object
      properties:
        code:
          type: string
          description: The HTTP status code indicating the conflict.
          examples: 
            - "invalid_request_error"
        message:
          type: string
          description: A human-readable message explaining the conflict.
          examples: 
            - "Channel cannot be deleted because it is associated with active notifications."
        type:
          type: string
          description: The category of the error.
          examples: 
            - "invalid_request_error"

  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      description: API Key for namespace-based access with specific permissions.
    cognito_oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://<domain>.auth.<region>.amazoncognito.com/oauth2/authorize
          tokenUrl: https://<domain>.auth.<region>.amazoncognito.com/oauth2/token
          scopes:
            write:processes: Modify processes in your account
            read:processes: View processes in your account